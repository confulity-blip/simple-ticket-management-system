version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: ticket-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ticket_production
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ticket-network

  # Redis (optional - for caching)
  redis:
    image: redis:7-alpine
    container_name: ticket-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - ticket-network

  # Rails API Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ticket-api
    restart: unless-stopped
    depends_on:
      - postgres
      - redis
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/ticket_production
      REDIS_URL: redis://redis:6379/0
      RAILS_ENV: production
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      SECRET_KEY_BASE: ${SECRET_KEY_BASE}
      FRONTEND_URL: ${FRONTEND_URL}
    ports:
      - "3000:3000"
    networks:
      - ticket-network
    volumes:
      - ./log:/rails/log
      - ./storage:/rails/storage

  # Nginx (serves frontend + reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: ticket-nginx
    restart: unless-stopped
    depends_on:
      - api
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./frontend/dist:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - ticket-network

volumes:
  postgres_data:
  redis_data:

networks:
  ticket-network:
    driver: bridge
